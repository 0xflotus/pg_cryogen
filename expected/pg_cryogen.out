CREATE EXTENSION pg_cryogen;
CREATE TEMPORARY TABLE tmp_data
AS SELECT gs as id, md5(gs::TEXT) as msg FROM generate_series(1, 500) as gs;
COPY tmp_data TO '/tmp/pg_cryogen_data.csv' WITH csv;
CREATE TABLE data (id INT4 NOT NULL, msg TEXT) USING pg_cryogen;
COPY data FROM '/tmp/pg_cryogen_data.csv' WITH csv;
SELECT * FROM data LIMIT 10;
 id |               msg                
----+----------------------------------
  1 | c4ca4238a0b923820dcc509a6f75849b
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
(10 rows)

SELECT avg(id) FROM data;
         avg          
----------------------
 250.5000000000000000
(1 row)

SELECT count(*) FROM data;
 count 
-------
   500
(1 row)

CREATE INDEX data_id_idx ON data USING btree (id);
SET enable_seqscan = f;
ANALYZE data;
EXPLAIN (COSTS OFF) SELECT * FROM data WHERE id = 500;
              QUERY PLAN              
--------------------------------------
 Index Scan using data_id_idx on data
   Index Cond: (id = 500)
(2 rows)

SELECT * FROM data WHERE id = 500;
 id  |               msg                
-----+----------------------------------
 500 | cee631121c2ec9232f3a2f028ad5c89b
(1 row)

DROP INDEX data_id_idx;
CREATE INDEX data_id_idx ON data USING brin (id);
EXPLAIN (COSTS OFF) SELECT * FROM data WHERE id = 500;
               QUERY PLAN               
----------------------------------------
 Bitmap Heap Scan on data
   Recheck Cond: (id = 500)
   ->  Bitmap Index Scan on data_id_idx
         Index Cond: (id = 500)
(4 rows)

SELECT * FROM data WHERE id = 500;
 id  |               msg                
-----+----------------------------------
 500 | cee631121c2ec9232f3a2f028ad5c89b
(1 row)

SET enable_seqscan = t;
SET pg_cryogen.compression_method = 'lz4';
COPY data FROM '/tmp/pg_cryogen_data.csv' WITH csv;
SELECT count(*) FROM data;
 count 
-------
  1000
(1 row)

VACUUM data;
-- inserts
TRUNCATE data;
INSERT INTO data
SELECT gs as id, md5(gs::TEXT) as msg FROM generate_series(1, 500) as gs;
-- check FKs
DROP INDEX data_id_idx;
CREATE UNIQUE INDEX data_id_idx ON data USING btree (id);
CREATE TABLE ref_table (id SERIAL, data_id INT4 REFERENCES data (id));
INSERT INTO ref_table VALUES (1, 50), (2, 100), (3, 250); -- cryo_tuple_lock is called here
EXPLAIN (COSTS OFF) SELECT * FROM data JOIN ref_table ON data_id = data.id;
                 QUERY PLAN                 
--------------------------------------------
 Hash Join
   Hash Cond: (ref_table.data_id = data.id)
   ->  Seq Scan on ref_table
   ->  Hash
         ->  Seq Scan on data
(5 rows)

SELECT * FROM data JOIN ref_table ON data_id = data.id LIMIT 3;
 id  |               msg                | id | data_id 
-----+----------------------------------+----+---------
  50 | c0c7c76d30bd3dcaefc96f40275bdc0a |  1 |      50
 100 | f899139df5e1059396431415e770c6dd |  2 |     100
 250 | 6c9882bbac1c7093bd25041881277658 |  3 |     250
(3 rows)

DROP TABLE ref_table;
DROP INDEX data_id_idx;
-- check rescan
CREATE TABLE other_table AS
SELECT gs as id, '2000-01-01'::DATE + gs as dt FROM generate_series(1, 500) as gs;
SET enable_hashjoin = f;
SET enable_mergejoin = f;
SET enable_material = f;
EXPLAIN (COSTS OFF) SELECT * FROM data JOIN other_table USING (id);
                QUERY PLAN                 
-------------------------------------------
 Nested Loop
   Join Filter: (data.id = other_table.id)
   ->  Seq Scan on other_table
   ->  Seq Scan on data
(4 rows)

SELECT * FROM data JOIN other_table USING (id) LIMIT 3;
 id |               msg                |     dt     
----+----------------------------------+------------
  1 | c4ca4238a0b923820dcc509a6f75849b | 01-02-2000
(1 row)

